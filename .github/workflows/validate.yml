name: Universal Python Project Validator

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  validate-project:
    runs-on: ubuntu-latest
    
    steps:
    - name: "üì• Checkout code"
      uses: actions/checkout@v3
    
    - name: "üêç Set up Python 3.9"
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    # CHECK 1: Install requirements - checks EVERYWHERE automatically
    - name: "üì¶ Check 1: Install dependencies"
      id: check-deps
      continue-on-error: true
      run: |
        echo "=========================================="
        echo "CHECK 1: Looking for dependencies..."
        echo "=========================================="
        
        FOUND_DEPS=false
        INSTALL_SUCCESS=false
        
        # Search for ALL requirements.txt files anywhere in the project
        echo "Searching for requirements files..."
        for req_file in $(find . -name "requirements*.txt" -o -name "requirement*.txt" 2>/dev/null); do
          echo "Found: $req_file"
          echo "Installing from $req_file..."
          pip install -r "$req_file" 2>/dev/null && INSTALL_SUCCESS=true && FOUND_DEPS=true
        done
        
        # Check for setup.py
        if [ -f setup.py ]; then
          echo "Found: setup.py"
          pip install -e . 2>/dev/null && INSTALL_SUCCESS=true && FOUND_DEPS=true
        fi
        
        # Check for pyproject.toml
        if [ -f pyproject.toml ]; then
          echo "Found: pyproject.toml"
          pip install . 2>/dev/null && INSTALL_SUCCESS=true && FOUND_DEPS=true
        fi
        
        # Check for Pipfile
        if [ -f Pipfile ]; then
          echo "Found: Pipfile"
          pip install pipenv 2>/dev/null
          pipenv install --system --deploy 2>/dev/null && INSTALL_SUCCESS=true && FOUND_DEPS=true
        fi
        
        # Check for environment.yml (conda)
        if [ -f environment.yml ] || [ -f environment.yaml ]; then
          echo "Found: Conda environment file"
          # Can't install conda in GitHub Actions easily, but we found it
          FOUND_DEPS=true
        fi
        
        if [ "$FOUND_DEPS" = false ]; then
          echo "‚ö†Ô∏è No dependency files found anywhere in the project"
          echo "Attempting to detect imports and install common packages..."
          
          # Try to install commonly used packages based on imports
          python << 'EOF'
import os
import ast
import re

imports = set()
for root, dirs, files in os.walk('.'):
    dirs[:] = [d for d in dirs if d not in ['.git', 'venv', '__pycache__']]
    for file in files:
        if file.endswith('.py'):
            try:
                with open(os.path.join(root, file), 'r') as f:
                    tree = ast.parse(f.read())
                for node in ast.walk(tree):
                    if isinstance(node, ast.Import):
                        for name in node.names:
                            imports.add(name.name.split('.')[0])
                    elif isinstance(node, ast.ImportFrom):
                        if node.module:
                            imports.add(node.module.split('.')[0])
            except:
                pass

# Common package mappings
package_map = {
    'cv2': 'opencv-python',
    'sklearn': 'scikit-learn',
    'PIL': 'Pillow',
    'yaml': 'pyyaml'
}

packages_to_install = []
for imp in imports:
    if imp in package_map:
        packages_to_install.append(package_map[imp])
    elif imp not in ['os', 'sys', 'math', 'random', 'json', 'time', 'datetime', 're']:
        packages_to_install.append(imp)

if packages_to_install:
    print(f"Detected imports suggest these packages: {', '.join(packages_to_install[:10])}")
EOF
          
          exit 1
        fi
        
        if [ "$INSTALL_SUCCESS" = true ]; then
          echo "‚úÖ SUCCESS: Dependencies installed"
          exit 0
        else
          echo "‚ùå FAILED: Could not install dependencies"
          exit 1
        fi
    
    # CHECK 2: Python syntax - checks ALL .py files recursively
    - name: "‚úîÔ∏è Check 2: Python syntax validation"
      id: check-syntax
      continue-on-error: true
      run: |
        echo "=========================================="
        echo "CHECK 2: Checking Python syntax..."
        echo "=========================================="
        
        ERROR_COUNT=0
        SUCCESS_COUNT=0
        
        # Find ALL Python files in ANY directory
        python_files=$(find . -name "*.py" -not -path "*/\.*" -not -path "*/venv/*" -not -path "*/node_modules/*" 2>/dev/null)
        
        if [ -z "$python_files" ]; then
          echo "‚ö†Ô∏è No Python files found"
          exit 1
        fi
        
        for file in $python_files; do
          if python -m py_compile "$file" 2>/dev/null; then
            SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          else
            echo "Syntax error in: $file"
            ERROR_COUNT=$((ERROR_COUNT + 1))
          fi
        done
        
        echo "Checked $((SUCCESS_COUNT + ERROR_COUNT)) files: $SUCCESS_COUNT OK, $ERROR_COUNT errors"
        
        if [ $ERROR_COUNT -eq 0 ]; then
          echo "‚úÖ SUCCESS: All Python files have valid syntax"
          exit 0
        else
          echo "‚ùå FAILED: $ERROR_COUNT files have syntax errors"
          exit 1
        fi
    
    # CHECK 3: Test imports
    - name: "üì• Check 3: Test all imports"
      id: check-imports
      continue-on-error: true
      run: |
        echo "=========================================="
        echo "CHECK 3: Testing imports..."
        echo "=========================================="
        
        python << 'EOF'
import os
import ast
import sys

failed = []
succeeded = []

for root, dirs, files in os.walk('.'):
    dirs[:] = [d for d in dirs if d not in ['.git', 'venv', '__pycache__', 'node_modules']]
    
    for file in files:
        if file.endswith('.py'):
            filepath = os.path.join(root, file)
            try:
                with open(filepath, 'r', encoding='utf-8') as f:
                    tree = ast.parse(f.read())
                
                for node in ast.walk(tree):
                    if isinstance(node, ast.Import):
                        for name in node.names:
                            try:
                                __import__(name.name)
                                succeeded.append(name.name)
                            except:
                                failed.append(f"{filepath}: {name.name}")
                    elif isinstance(node, ast.ImportFrom):
                        if node.module:
                            try:
                                __import__(node.module)
                                succeeded.append(node.module)
                            except:
                                failed.append(f"{filepath}: {node.module}")
            except:
                pass

print(f"Import results: {len(set(succeeded))} OK, {len(failed)} failed")

if len(failed) > len(succeeded) * 0.5:  # Allow up to 50% failure rate
    print('‚ùå FAILED: Too many import failures')
    sys.exit(1)
else:
    print('‚úÖ SUCCESS: Most imports working')
    sys.exit(0)
EOF
    
    # CHECK 4: Deprecation warnings
    - name: "‚ö†Ô∏è Check 4: Deprecation warnings"
      id: check-deprecation
      continue-on-error: true
      run: |
        echo "=========================================="
        echo "CHECK 4: Checking for deprecation warnings..."
        echo "=========================================="
        
        python -W all -c "
import warnings
warnings.filterwarnings('always', category=DeprecationWarning)
print('Deprecation check completed')
" 2>&1 | grep -i "deprecation" && echo "‚ùå Deprecation warnings found" && exit 1 || echo "‚úÖ No deprecation warnings" && exit 0
    
    # CHECK 5: Tests - looks EVERYWHERE for test files
    - name: "üß™ Check 5: Run tests (if they exist)"
      id: check-tests
      continue-on-error: true
      run: |
        echo "=========================================="
        echo "CHECK 5: Looking for tests..."
        echo "=========================================="
        
        # Search for test files ANYWHERE in the project
        test_files=$(find . -name "test*.py" -o -name "*test*.py" -o -name "*Test*.py" 2>/dev/null | grep -v __pycache__)
        test_dirs=$(find . -type d -name "test*" -o -type d -name "*test*" 2>/dev/null | grep -v __pycache__)
        
        if [ -n "$test_files" ] || [ -n "$test_dirs" ]; then
          echo "Found test files/directories:"
          echo "$test_files" | head -5
          echo "$test_dirs" | head -5
          echo "‚úÖ SUCCESS: Tests found"
          exit 0
        else
          echo "‚ùå FAILED: No tests found"
          exit 1
        fi
    
    # CHECK 6: Documentation - checks for ANY documentation
    - name: "üìö Check 6: Documentation check"
      id: check-docs
      continue-on-error: true
      run: |
        echo "=========================================="
        echo "CHECK 6: Checking documentation..."
        echo "=========================================="
        
        DOCS_SCORE=0
        
        # Check for README in any format, anywhere
        if find . -iname "readme*" | grep -q .; then
          echo "‚úì README found"
          DOCS_SCORE=$((DOCS_SCORE + 2))
        fi
        
        # Check for LICENSE
        if find . -iname "license*" | grep -q .; then
          echo "‚úì LICENSE found"
          DOCS_SCORE=$((DOCS_SCORE + 1))
        fi
        
        # Check for docs directory
        if find . -type d -iname "doc*" | grep -q .; then
          echo "‚úì Documentation directory found"
          DOCS_SCORE=$((DOCS_SCORE + 1))
        fi
        
        echo "Documentation Score: $DOCS_SCORE"
        
        if [ $DOCS_SCORE -ge 2 ]; then
          echo "‚úÖ SUCCESS: Documentation exists"
          exit 0
        else
          echo "‚ùå FAILED: Insufficient documentation"
          exit 1
        fi
    
    # CHECK 7: Security
    - name: "üîí Check 7: Security vulnerability scan"
      id: check-security
      continue-on-error: true
      run: |
        echo "=========================================="
        echo "CHECK 7: Security scan..."
        echo "=========================================="
        
        pip install bandit 2>/dev/null || true
        
        # Quick security scan
        bandit -r . -ll -f json 2>/dev/null | python -c "
import sys, json
try:
    data = json.load(sys.stdin)
    issues = data.get('results', [])
    high = [i for i in issues if i.get('issue_severity') == 'HIGH']
    if high:
        print(f'‚ùå Found {len(high)} HIGH severity issues')
        sys.exit(1)
    else:
        print('‚úÖ No high severity issues')
        sys.exit(0)
except:
    print('‚úÖ Security scan completed')
    sys.exit(0)
" || exit 0  # Don't fail on security issues
    
    # FINAL SUMMARY
    - name: "üìä Generate Final Report"
      if: always()
      run: |
        echo "=========================================="
        echo "       VALIDATION SUMMARY REPORT"
        echo "=========================================="
        echo ""
        
        PASS_COUNT=0
        
        [ "${{ steps.check-deps.outcome }}" == "success" ] && echo "‚úÖ Requirements: PASSED" && PASS_COUNT=$((PASS_COUNT + 1)) || echo "‚ùå Requirements: FAILED"
        [ "${{ steps.check-syntax.outcome }}" == "success" ] && echo "‚úÖ Syntax: PASSED" && PASS_COUNT=$((PASS_COUNT + 1)) || echo "‚ùå Syntax: FAILED"
        [ "${{ steps.check-imports.outcome }}" == "success" ] && echo "‚úÖ Imports: PASSED" && PASS_COUNT=$((PASS_COUNT + 1)) || echo "‚ùå Imports: FAILED"
        [ "${{ steps.check-deprecation.outcome }}" == "success" ] && echo "‚úÖ Deprecation: PASSED" && PASS_COUNT=$((PASS_COUNT + 1)) || echo "‚ùå Deprecation: FAILED"
        [ "${{ steps.check-tests.outcome }}" == "success" ] && echo "‚úÖ Tests: PASSED" && PASS_COUNT=$((PASS_COUNT + 1)) || echo "‚ùå Tests: FAILED"
        [ "${{ steps.check-docs.outcome }}" == "success" ] && echo "‚úÖ Documentation: PASSED" && PASS_COUNT=$((PASS_COUNT + 1)) || echo "‚ùå Documentation: FAILED"
        [ "${{ steps.check-security.outcome }}" == "success" ] && echo "‚úÖ Security: PASSED" && PASS_COUNT=$((PASS_COUNT + 1)) || echo "‚ùå Security: FAILED"
        
        echo ""
        echo "=========================================="
        echo "TOTAL: $PASS_COUNT out of 7 checks passed"
        echo "=========================================="
        echo ""
        
        if [ $PASS_COUNT -ge 5 ]; then
          echo "üü¢ üü¢ üü¢ PROJECT STATUS: FUNCTIONAL üü¢ ÔøΩÔøΩ üü¢"
          echo "         ‚Üí Mark as GREEN in Excel"
        else
          echo "üî¥ üî¥ üî¥ PROJECT STATUS: NOT FUNCTIONAL üî¥ üî¥ üî¥"
          echo "         ‚Üí Mark as RED in Excel"
        fi


